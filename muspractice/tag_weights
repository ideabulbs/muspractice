#!/usr/bin/env python
import subprocess
import os
import re
import json
import operator
import sys
import math
from optparse import OptionParser
from config.config import Config as MuspracticeConfig


def get_config(config_file):
    """Read target weights from config file"""
    try:
        with open(config_file, 'r') as inp:
            config_dict = json.load(inp)
    except IOError:
        raise RuntimeError('Could not find tag weight config: %s' % config_file)

    # check that total sum of all weights is 1.0 (for consistent results)
    weight_sum = 0
    for tag in list(config_dict['tag_weights'].keys()):
        weight_sum += config_dict['tag_weights'][tag]

    if abs(weight_sum - 1.0) > 0.001:
        print(('The sum of all target weights in config file %s should be 1.0. Current sum: %f. Please adjust the target weights.' % (config_file, weight_sum)))
        sys.exit(1)
    return config_dict

def get_data(muspractice_config, history_length):
    """Read repetition data from muspractice"""
    muspractice_config = MuspracticeConfig(muspractice_config)
    cmd = "python muspractice -C %s -R | tail -n %s" % (muspractice_config, history_length)
    popen = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = popen.communicate()
    result = []
    for line in stdout.splitlines():
        tagline = line.split(':::')[-2]
        tagline = re.sub(' +', ' ', tagline)
        tags = tagline.split(' ')
        result.append(tags)
    return result

def get_unique_tags(phrase_tag_list):
    """Create a list of unique tags"""
    unique_tags = []
    for item in phrase_tag_list:
        for tag in item:
            if tag not in unique_tags:
                unique_tags.append(tag)
    return unique_tags

def print_weights(sorted_diff, history_length, limit=None):
    """Print the calculated weights"""
    out = ""
    list_range = sorted_diff
    if limit is not None:
        list_range = sorted_diff[:limit]

    for item in list_range:
        additional_reps = history_length * item[1]
        out += "%s:%d  " % (item[0], math.ceil(additional_reps) * (-1))
    print("Categories that need more repetitions:")
    print(out)

def main():
    """main"""
    parser = OptionParser()
    parser.add_option('-C', '--muspractice-config', action="store",
                      type="string", dest="muspractice_config",
                      help="muspractice configuration file to use. ")

    parser.add_option('-c', '--config', action="store",
                      type="string", dest="config",
                      help="tagweights configuration file to use. ")

    (options, args) = parser.parse_args()
    if not options.muspractice_config:
        raise RuntimeError('No muspractice config file given!')

    if not options.config:
        raise RuntimeError('No tag weights config file given!')

    config = get_config(options.config)
    data = get_data(options.muspractice_config, config['history_length'])
    target_weights = config['tag_weights']
    current_weights = dict()
    for tagline, value in target_weights.items():
        if tagline not in current_weights:
            current_weights[tagline] = 0
        tags = tagline.split(' ')
        for item in data:
            all_tags_found = True
            for tag in tags:
                if tag not in item:
                    all_tags_found = False
            if all_tags_found:
                current_weights[tagline] += 1

    for tagline, value in current_weights.items():
        current_weights[tagline] = float(value) / config['history_length']
    
    diff_dict = dict()
    for tag, value in target_weights.items():
        if tag in list(current_weights.keys()):
            diff_dict[tag] = target_weights[tag] - current_weights[tag]
        else:
            diff_dict[tag] = target_weights[tag]

    sorted_diff = sorted(list(diff_dict.items()), key=operator.itemgetter(1))
    sorted_diff.reverse()
    
    if len(sorted_diff) > 3:
        limit = 3
    else:
        limit = None
    print_weights(sorted_diff, config['history_length'], limit=limit)


if __name__ == '__main__':
    main()
