#!/usr/bin/python
import datetime
import subprocess
import glob
import os
import re
import sys
import shutil
from config.config import Config
from models.dbhandler import PrioritizedScheduleDatabaseHandler
from models.Schedule import *
from models.Scheduler import *
from models.Repetition import *
from models.MetronomeSetup import *
from models.IniSerializator import *


class YoutubeDownloader(object):

    def __init__(self, url, output_file=None, output_directory="./"):
        self.url = url
        self.output_file = output_file
        self.output_directory = output_directory
        self.thumbnail_file = None
        
    def download(self):
        orig_mp3_files = glob.glob('%s/*.mp3' % self.output_directory)
        orig_jpg_files = glob.glob('%s/*.jpg' % self.output_directory)

        cmd = 'youtube-dl --write-thumbnail --restrict-filenames --extract-audio --audio-format mp3 '
        cmd = cmd + self.url
        popen = subprocess.Popen(cmd.split())
        popen.communicate()
        if popen.returncode != 0:
            raise RuntimeError("Could not get video/audio from " + self.url)
        
        current_mp3_files = glob.glob('%s/*.mp3' % self.output_directory)
        diff_files = list(set(current_mp3_files) - set(orig_mp3_files))
        if len(diff_files) == 0:
            raise RuntimeError("Could not get filename of retrieved mp3 file")
        output_file = diff_files[0]
        if self.output_file is not None:
            os.rename("%s/%s" % (self.output_directory, output_file), "%s/%s" % (self.output_directory, self.output_file))
        else:
            self.output_file = output_file

        current_jpg_files = glob.glob('%s/*.jpg' % self.output_directory)
        diff_files = list(set(current_jpg_files) - set(orig_jpg_files))
        if len(diff_files) == 0:
            raise RuntimeError("Could not get filename of retrieved thumbnail file")
        self.thumbnail_file = diff_files[0]

        # Optional thumbnail rescale:
        # cmd = "convert -resize 50%% %s %s" % (self.thumbnail_file, self.thumbnail_file + "_resized")
        # popen = subprocess.Popen(cmd.split())
        # popen.communicate()
        # if popen.returncode != 0:
        #     raise RuntimeError("Could not resize thumbnail " + self.thumbnail_file)
        # os.unlink(self.thumbnail_file)
        # os.rename(self.thumbnail_file + "_resized", self.thumbnail_file)
        
        return True

class AudioFileCutter(object):

    def __init__(self, filename, start_time="0:00", end_time="0:00", remove_source_filename=False):
        self.filename = filename
        self.start_time = start_time
        self.end_time = end_time
        self.output_filename = None
        self.remove_source_filename = remove_source_filename
        
    def cut(self):
        if self.end_time != "0:00":
            cmd = 'cutmp3 -o cut_out -i "%s" -a %s -b %s' % (self.filename, self.start_time, self.end_time)
            popen = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            stdout, stderr = popen.communicate()
            if popen.returncode != 0:
                print stdout
                print stderr
                raise RuntimeError("Could not cut the file %s" % self.filename)
            start_ts = re.sub(":", "_", self.start_time)
            end_ts = re.sub(":", "_", self.end_time)
            filename_only = self.filename.split('/')[-1]
            output_filename = re.sub(".mp3$", "", filename_only)
            output_filename += "__%s__%s.mp3" % (start_ts, end_ts)
            os.rename("cut_out0001.mp3", output_filename)
            if self.remove_source_filename:
                os.unlink(self.filename)
            self.output_filename = output_filename
        return True

class FragmentSource(object):

    def __init__(self, start_time, end_time, tagline):
        self.start_time = start_time
        self.end_time = end_time
        self.tagline = tagline
        self.music_directory_subtree = "audio"
        self.remove_files = []
        config_filename = ".muspracticerc"
        if os.path.exists('./%s' % config_filename):
            config_filename = "./%s" % config_filename
        else:
            config_filename = "~/%s" % config_filename
        self.config = Config(config_filename)
        if self.config.is_new:
            print "New config has been initialized. Verify settings: %s" % config_filename        
            sys.exit(0)
        self.dbh = PrioritizedScheduleDatabaseHandler(self.config.DATABASE_FILE)

    def get_audio_file(self):
        raise NotImplemented

    def get_thumbnail_file(self):
        raise NotImplemented
    
    def process(self):
        self.get_audio_file()
        self.get_thumbnail_file()
        
        if self.audio_file:
            afc = AudioFileCutter(self.audio_file, self.start_time, self.end_time)
            if not afc.cut():
                raise RuntimeError("Could not cut the retrieved audio!")
            output_filename = afc.output_filename
            if output_filename.startswith("./"):
                output_filename = output_filename[2:]
            audio_filename_only = output_filename.split('/')[-1]
            audio_filename_only = re.sub(' ', '_', audio_filename_only)
            database_dest_file = "%s/%s" % (self.music_directory_subtree, audio_filename_only)
            subtree_dest_file = self.config.MUSIC_DIRECTORY + database_dest_file
            os.rename(output_filename, subtree_dest_file)
            print "MP3 file created: %s" % subtree_dest_file
            
        if self.thumbnail_file:
            image_filename_only = self.thumbnail_file.split('/')[-1]
            database_dest_image = "%s/%.2f_%s" % (self.music_directory_subtree, time.time(), image_filename_only)
            subtree_dest_image = self.config.MUSIC_DIRECTORY + database_dest_image
            cmd = "cp %s %s" % (self.thumbnail_file, subtree_dest_image)
            popen = subprocess.Popen(cmd, shell=True)
            popen.communicate()
            if popen.returncode != 0:
                raise RuntimeError("Could not move file %s to %s" % (self.thumbnail_file, subtree_dest_image))
            print "Thumbnail file created: %s" % subtree_dest_image
            
        tokens = self.start_time.split(":")
        start_ts = int(tokens[0]) * 60 + int(tokens[1])

        tokens = self.end_time.split(":")
        end_ts = int(tokens[0]) * 60 + int(tokens[1])

        length = end_ts - start_ts
        from_position = 0.1
        end_position = length - 0.1
        
        phrase = Phrase()
        phrase.set_from_position(from_position)
        phrase.set_to_position(end_position)
        phrase.set_tagline(self.tagline)

        name = ""
        if self.audio_file:
            phrase.set_filename(database_dest_file)
            name = re.sub(".mp3$", "", audio_filename_only)
        
        if self.thumbnail_file:
            phrase.set_image(database_dest_image)
            name = re.sub(".png$", "", image_filename_only)

        phrase.set_name(name)
                                
        phrase_id = self.dbh.insert_phrase(phrase)
        if not phrase_id:
            print "Failed to add phrase to database"
            return
        schedule = Schedule()
        schedule.set_phrase_id(phrase_id)
        schedule.set_next_repetition(datetime.date.today())
        schedule_id = self.dbh.insert_schedule(schedule)
        if not schedule_id:
            print "Failed to schedule the new phrase"
            return
        metronome_setup = MetronomeSetup()
        metronome_setup.phrase_id = phrase_id
        metronome_setup.speed = 100
        metronome_setup.meter = 0
        metronome_setup.duration = 300
        metronome_setup.increment = 2
        metronome_setup_id = self.dbh.insert_metronome_setup(metronome_setup)
        if not metronome_setup_id:
            print "Failed to insert metronome setup"
            return
        print "Phrase inserted: id=%s" % phrase_id
        self.cleanup()
        
    def cleanup(self):
        for filename in self.remove_files:
            if os.path.exists(filename):
                os.unlink(filename)
                
class YoutubeFragmentInserter(FragmentSource):

    def __init__(self, url, start_time, end_time, tagline):
        FragmentSource.__init__(self, start_time, end_time, tagline)
        self.url = url
        self.music_directory_subtree = "youtube"  # the script will put all mp3 files here

    def get_audio_file(self):
        yd = YoutubeDownloader(self.url)
        yd.download()
        if yd.output_file is None:
            raise RuntimeError("Could not get video/audio from Youtube")
        self.remove_files.append(yd.output_file)
        self.audio_file = yd.output_file

    def get_thumbnail_file(self):
        thumbnail_file = re.sub(".mp3$", ".jpg", self.audio_file)
        if os.path.exists(thumbnail_file):
            self.thumbnail_file = thumbnail_file
            self.remove_files.append(self.thumbnail_file)
        else:
            self.thumbnail_file = None

class MP3FileInserter(FragmentSource):

    def __init__(self, source, start_time, end_time, tagline):
        FragmentSource.__init__(self, start_time, end_time, tagline)
        self.source = os.path.expanduser(source)
        self.music_directory_subtree = "mp3"  # the script will put all mp3 files here

    def get_audio_file(self):
        self.audio_file = self.source

    def get_thumbnail_file(self):
        self.thumbnail_file = None

    def cleanup(self):
        pass

class PNGFileInserter(FragmentSource):

    def __init__(self, source, tagline):
        FragmentSource.__init__(self, "00:00", "00:10", tagline)
        self.source = os.path.expanduser(source)
        self.music_directory_subtree = "png"
    
    def get_audio_file(self):
        self.audio_file = None

    def get_thumbnail_file(self):
        self.thumbnail_file = self.source
        
def main():
    if len(sys.argv) != 5:
        print "Usage: yt_insert <url/mp3 path> <tagline> <start_time> <end_time>"
        print "Example: yt_insert https://www.youtube.com/watch?v=abcdefghij guitar 0:10 0:25"
        sys.exit(1)
    source = sys.argv[1]
    tagline = sys.argv[2]
    start_time = sys.argv[3]
    end_time = sys.argv[4]
    if 'http' in source and 'youtube.com' in source:
        inserter = YoutubeFragmentInserter(source, start_time, end_time, tagline)
    elif '.mp3' in source.lower():
        inserter = MP3FileInserter(source, start_time, end_time, tagline)
    elif '.png' in source.lower():
        inserter = PNGFileInserter(source, tagline)        
    else:
        print "Could not determine source type"
        sys.exit(1)
        
    inserter.process()
    
        
if __name__ == "__main__":
    main()
