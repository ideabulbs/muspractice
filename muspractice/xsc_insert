#!/usr/bin/python
import subprocess
import os
import math
import mad
import sys


class Section(object):

    def __init__(self):
        self.start_pos = 0
        self.end_pos = 0
        self.name = ""
        self.source_filename = ""

    def is_ignored(self):
        '''Ignore insertion for unwanted sections. By convention, the name shall explicitly end with "+".'''
        return not self.name.endswith('+')

    def get_length(self):
        return self.end_pos - self.start_pos

    def get_sound_file_length(self):
        mf = mad.MadFile(os.path.abspath(self.source_filename))
        return mf.total_time() / 1000.0
    
    def get_timestamp_str(self, timestamp):
        minutes = int(timestamp / 60)
        seconds = timestamp - int(minutes * 60)
        return "%.2d:%.2d" % (minutes, seconds)
        
    def get_start_pos_str(self):
        return self.get_timestamp_str(self.start_pos)

    def get_end_pos_str(self):
        ceil = math.ceil(self.end_pos)
        file_length = self.get_sound_file_length()
        if ceil > file_length:
            ceil = file_length
        return self.get_timestamp_str(ceil)


class XSCReader(object):
    """Read XSC files from Transcribe"""

    def __init__(self, filename):
        self.filename = os.path.expanduser(filename)

        if not os.path.exists(self.filename):
            raise RuntimeError('Could not find file: %s' % self.filename)

        with open(self.filename, 'r') as inp:
            self.string = inp.read()

    def get_sound_filename(self):
        for line in self.string.splitlines():
            if line.startswith('SoundFileName,'):
                filename = line.split(',')[3]
                return filename
        return None

    def get_fx_speed(self):
        for line in self.string.splitlines():
            if line.startswith('FX_Speed,'):
                speed = line.split(',')[3]
                return int(speed) / 1000
        return None
        
    def convert_timestamp_to_seconds(self, timestamp):
        hours, minutes, seconds = timestamp.split(':')
        return int(hours) * 3600 + int(minutes) * 60 + float(seconds)

    def get_sound_file_length(self):
        mf = mad.MadFile(os.path.abspath(self.get_sound_filename()))
        return mf.total_time() / 1000.0
        
    def get_sections(self):
        sections = []
        section_part_open = False
        prev_section = None
        for line in self.string.splitlines():
            if line.startswith('SectionStart'):
                section_part_open = True
            elif line.startswith('SectionEnd'):
                section_part_open = False

            if not section_part_open:
                continue
            if not line.startswith('S,'):
                continue
            _, _, _, name, _, start_pos = line.split(",")
            if prev_section is not None:
                if prev_section.end_pos is None:
                    prev_section.end_pos = self.convert_timestamp_to_seconds(start_pos)

            section = Section()
            section.source_filename = self.get_sound_filename()
            section.name = name
            section.start_pos = self.convert_timestamp_to_seconds(start_pos)
            section.end_pos = None
            
            prev_section = section
            sections.append(section)

        if sections:
            if sections[-1].end_pos is None:
                sections[-1].end_pos = self.get_sound_file_length()
        return sections

def main():
    if not len(sys.argv) == 3:
        print "This script will read xsc files from Transcribe and insert chosen sections into the database for practicing"
        print "Usage: ./xsc_insert <xsc_file> <tagline>"
        sys.exit(1)
    xsc_file = os.path.expanduser(sys.argv[1])
    tagline = sys.argv[2]
    xr = XSCReader(xsc_file)
    sections = xr.get_sections()
    print 'Inserting sections from: %s' % xr.get_sound_filename()
    for s in sections:
        if s.is_ignored():
            print "Ignoring:", s.name, s.get_start_pos_str(), s.get_end_pos_str()
            print
            continue
        print "Inserting:", s.name, s.get_start_pos_str(), '--', s.get_end_pos_str()
        cmd = "./yt_insert %s 'tagline' %s %s" % (s.source_filename, s.get_start_pos_str(), s.get_end_pos_str())
        popen = subprocess.Popen(['./yt_insert', s.source_filename, tagline, s.get_start_pos_str(), s.get_end_pos_str()])
        popen.communicate()
        if popen.returncode != 0:
            raise RuntimeError('Error occured while inserting section %s from %s' % (s.name, s.source_filename))
        print

if __name__ == '__main__':
    main()
