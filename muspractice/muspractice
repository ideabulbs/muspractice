#!/usr/bin/python
import os
from models.dbhandler import PrioritizedScheduleDatabaseHandler
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "lib.settings")
import django
from django.utils.timezone import utc
import gst
import sys
import time
import datetime
import random
import ConfigParser
from optparse import OptionParser
import tools.Pipeline
from app.dao import DatabaseHandler
from app.models import Phrase, MetronomeSetup, Schedule, Repetition, Tag
from models.Scheduler import Scheduler
from models.IniSerializator import IniSerializator
from tools.Metronome import Metronome
from tools.SightRead import SightRead
from config.config import Config

import gobject
gobject.threads_init()


class TextInterface(object):

    def __init__(self):
        config_filename = ".muspracticerc"
        if os.path.exists('./%s' % config_filename):
            config_filename = "./%s" % config_filename
        else:
            config_filename = "~/%s" % config_filename
        self.config = Config(config_filename)
        if self.config.is_new:
            print "New config has been initialized. Verify settings: %s" % config_filename        
            sys.exit(0)
            
    def init_dbhandler(self, database):
        self.dbh = DatabaseHandler()
                        
    def list_phrases(self):
        phrases = self.dbh.get_phrases(orderby='id')
        out = ""
        for phrase in phrases:
            out += "%d\t%s\t%s\t" % (phrase.id, phrase.get_filename(path=False), phrase.comment.split(os.linesep)[0])
            for tag in phrase.tags.all():
                out += "%s" % tag.name
            out += os.linesep
        print out,
        
    def play_phrase(self, phrase_id):
        phrase = self.dbh.get_phrase_by_id(phrase_id)
        metronomes = self.dbh.get_metronome_setups_by_phrase_id(phrase_id)
        if not metronomes:
            print "No metronome found for the given phrase!"
            return
        metronome = metronomes[0]

        if phrase.image:
            sr = self.show_image(phrase, metronome)
            
        if phrase.get_filename():
            sink = gst.parse_bin_from_description(self.config.AUDIOSINK, True)
            player = tools.Pipeline.Pipeline(sink)

            if phrase.get_filename().startswith(os.sep):  # absolute path given
                media_file_path = phrase.get_filename()
            else:  # path relative to self.config.MUSIC_DIRECTORY
                media_file_path = '%s%s' % (self.config.MUSIC_DIRECTORY, phrase.get_filename())
                media_file_path = os.path.expanduser(media_file_path)
            if not os.path.exists(media_file_path):
                sys.stderr.write("Media file not found: %s\n" % media_file_path)
                return

            uri = "file://%s" % os.path.expanduser(media_file_path)
            player.reset()
            player.pause()
            player.set_file(uri)

            player.set_from_position(phrase.from_position)
            player.set_to_position(phrase.to_position)

            speed = phrase.speed
            if speed > 0:
                speed = speed / 100.0
            else:
                speed = 1.0
            player.set_speed(speed)

            if phrase.pitch:
                player.set_pitch(2**(phrase.get_pitch()/12.0))

            player.set_loop(True)
            player.play()
            duration = 0
            repetition = 1
            print "Duration: %d" % metronome.duration
            while True:
                position = player.get_position()
                if not position:
                    continue
                if position <= player.get_from_position() or position > player.get_to_position() or duration == 0:
                    if duration > metronome.duration:
                        break
                    print "Repetition %d" % repetition
                    player.seek(player.get_from_position())
                    repetition += 1
                duration += 1
                time.sleep(1)
            player.pause()
            
        if phrase.image:
            sr.stop()

            
    def show_phrase(self, phrase_id):
        phrase = self.dbh.get_phrase_by_id(phrase_id)
        if phrase:
            print
            print "File: %s" % phrase.filename
            if phrase.image:
                print "Image: %s" % phrase.image
            if phrase.get_tagline():
                print "Tags: %s" % phrase.get_tagline()
            print "From: %.2f" % phrase.from_position
            print "To: %.2f" % phrase.to_position
            print
            print phrase.comment
        else:
            "Phrase not found. Wrong id?"
        metronomes = self.dbh.get_metronome_setups_by_phrase_id(phrase_id)
        if metronomes:
            ms = metronomes[0]
            print "Metronome: speed=%d; meter=%d; duration=%d; increment=%d" % (ms.speed, ms.meter, ms.duration, ms.speed_increment)

    def reschedule_phrase(self, phrase_id):
        phrase = self.dbh.get_phrase_by_id(phrase_id)
        if not phrase:
            print "No phrase found with the given id: %d" % phrase_id
            return
        repetitions = self.dbh.get_repetitions_by_phrase_id(phrase_id)
        scheduler = Scheduler()
        while True:
            user_input = raw_input("Enter new grade (0-5): ")
            try:
                grade = int(user_input)
                if grade in range(0,6):
                    break
            except ValueError:
                continue
        current_repetition = Repetition()
        timestamp = datetime.datetime.utcnow()
        timestamp = timestamp.replace(tzinfo=utc)
        current_repetition.timestamp = timestamp
        current_repetition.grade = grade
        current_repetition.phrase = phrase
        current_repetition.pitch = phrase.pitch
        current_repetition.phrase_speed = phrase.speed
        
        if phrase.speed and phrase.speed_increment:
            phrase.speed += phrase.speed_increment
            if not self.dbh.updated_phrase(phrase):
                print "Failed to update phrase: %s" % phrase
                
        metronomes = self.dbh.get_metronome_setups_by_phrase_id(phrase_id)
        if metronomes:
            ms = metronomes[0]
            current_repetition.metronome_speed = ms.speed
            if ms.speed_increment and ms.speed != 0:
                ms.speed += ms.speed_increment
            if not self.dbh.update_metronome_setup(ms):
                print "Failed to update the metronome setup"
        else:
            current_repetition.metronome_speed = 0

        schedule = scheduler.get_new_schedule(phrase, grade, repetition_list=repetitions)
        print "Next repetition: %s" % schedule.next_repetition

        self.dbh.insert_schedule(schedule)
        
        past_schedules = self.dbh.get_schedules_by_phrase_id(phrase_id)
        if past_schedules:
            for schedule in past_schedules:
                if not self.dbh.remove_schedule(schedule):
                    print "Failed to remove old schedule: %d" % (schedule.id)
                                
        self.dbh.insert_repetition(current_repetition)

                
    def show_todo_list(self):
        schedules = self.dbh.get_active_schedules(orderby="next_repetition")
        schedules.reverse()
        for schedule in schedules:
            phrase = schedule.phrase 
            if not phrase:
                print "Inconsistent database!"
                return
            if schedule.priority is not None:
                priority = "%.1f" % schedule.priority
            else:
                priority = None
            if priority:
                description = phrase.name
                if not description:
                    description = phrase.get_short_description()
                print phrase.id, "\t", priority, "\t", phrase.get_filename(path=False), description, "\t", phrase.get_tagline()

    def edit_phrase(self, phrase_id):
        phrase = self.dbh.get_phrase_by_id(phrase_id)
        metronome_setups = self.dbh.get_metronome_setups_by_phrase_id(phrase_id)
        if not phrase and not metronome_setups:
            print "No phrase or metronome found"
            return False
        tempfile = '%sdata_%.2f.ini' % (self.config.TEMPORARY_DIRECTORY, time.time())

        if not metronome_setups:
            metronome_setup = MetronomeSetup()
            metronome_setup.phrase_id = phrase_id
            metronome_setup.speed = 100
            metronome_setup.meter = 4
            metronome_setup.duration = 300
            metronome_setup.increment = 0
            ms_id = self.dbh.insert_metronome_setup(metronome_setup)
            metronome_setup.id = ms_id
        else:
            metronome_setup = metronome_setups[0]
        pis = IniSerializator(tempfile, phrase=phrase, metronome_setup=metronome_setup)
        if not pis.write():
            print "Unable to write temporary file: %s" % tempfile
            return
        if not 'EDITOR' in os.environ:
            print "Can't find suitable editor. Set the EDITOR environment variable!"
        else:
            os.system("%s %s" % (os.environ['EDITOR'], tempfile))
        updated_result = pis.read()
        updated_phrase = updated_result['Phrase']
        updated_metronome_setup = updated_result['MetronomeSetup']
        if updated_phrase:
            if not self.dbh.update_phrase(updated_phrase):
                print "Can't update the phrase"
            else:
                print "Phrase updated"
        if updated_metronome_setup:
            if not self.dbh.update_metronome_setup(updated_metronome_setup):
                print "Can't update the metronome setup"
            else:
                print "Metronome setup updated"
        os.unlink(tempfile)
        return True

    def delete_phrase(self, phrase_id):
        phrase = self.dbh.get_phrase_by_id(phrase_id)
        if not phrase:
            print "No phrase found with the given id: %d" % phrase_id
            return
        if not self.dbh.remove_phrase(phrase):
            print "Error occured while removing the phrase"
        else:
            print "Phrase removed: %s %s" % (phrase.get_filename(path=False), phrase.get_short_description())

    def create_phrase(self):
        phrase = Phrase()
        phrase_id = self.dbh.insert_phrase(phrase)
        if not phrase_id:
            print "Failed to add phrase to database"
            return
        schedule = Schedule()
        schedule.set_phrase_id(phrase_id)
        schedule.set_next_repetition(datetime.date.today())
        schedule_id = self.dbh.insert_schedule(schedule)
        if not schedule_id:
            print "Failed to schedule the new phrase"
            return
        metronome_setup = MetronomeSetup()
        metronome_setup.phrase_id = phrase_id
        metronome_setup.speed = 100
        metronome_setup.meter = 4
        metronome_setup.duration = 300
        metronome_setup.increment = 2
        metronome_setup_id = self.dbh.insert_metronome_setup(metronome_setup)
        if not metronome_setup_id:
            print "Failed to insert metronome setup"
            return
        self.edit_phrase(phrase_id)

    def deactivate_phrase(self, phrase_id):
        phrase = self.dbh.get_phrase_by_id(phrase_id)
        if not phrase_id:
            print "Failed to deactivate phrase: the given phrase is not found"
            return

        past_schedules = self.dbh.get_schedules_by_phrase_id(phrase_id)
        if past_schedules:
            for schedule in past_schedules:
                if not self.dbh.remove_schedule(schedule):
                    print "Failed to remove old schedule: %d" % (schedule.id)

        schedule = Schedule()
        schedule.set_phrase_id(phrase_id)
        schedule.set_next_repetition(datetime.date(1970, 1, 1))
        schedule_id = self.dbh.insert_schedule(schedule)
        if not schedule_id:
            print "Failed to deactivate phrase id %d" % phrase_id
            return

    def list_deactivated_phrases(self):
        schedules = self.dbh.get_inactive_schedules(orderby="next_repetition")
        schedules.reverse()
        for schedule in schedules:
            phrase = self.dbh.get_phrase_by_id(schedule.get_phrase_id())
            if not phrase:
                print "Inconsistent database!"
                return
            print phrase.id, "\t", "DEACTIVATED", "\t", phrase.get_filename(path=False),
            phrase.get_short_description(), "\t", phrase.get_tagline(), '.'

    def show_image(self, phrase, ms):
        sr = SightRead()
        sr.filename = os.path.expanduser(self.config.MUSIC_DIRECTORY + phrase.get_image())
        sr.duration = ms.duration
        if not sr.start():
            print "Could not show image!"
        return sr
            
    def play_metronome(self, phrase_id):
        phrase = self.dbh.get_phrase_by_id(phrase_id)
        if not phrase:
            print "No phrase found with the given id: %d" % phrase_id
            return
        metronomes = self.dbh.get_metronome_setups_by_phrase_id(phrase_id)
        if not metronomes:
            print "No metronome found for the given phrase!"
            return
        ms = metronomes[0]

        m = Metronome()
        m.set_meter(ms.meter)
        m.set_speed(ms.speed)
        print "Metronome tempo: %d; Meter: %s" % (ms.speed, ms.meter)
        m.set_duration(ms.duration)

        if phrase.get_image():
            sr = self.show_image(phrase, ms)
            
        # if speed is 0, metronome won't be started
        if ms.speed != 0:
            if not m.start():
                print "Could not start metronome!"
                
        time.sleep(ms.duration)

        # if speed is 0, metronome wasn't started and doesn't have to be stopped
        if ms.speed != 0:
            if not m.stop():
                print "Could not stop metronome!"

        if phrase.get_image():
            sr.stop()
                
    def list_repetitions(self):
        repetitions = self.dbh.get_repetitions()
        for repetition in repetitions:
            phrase = self.dbh.get_phrase_by_id(repetition.phrase.id)
            print repetition.id, repetition.timestamp, repetition.grade, phrase.get_filename(path=False), phrase.get_short_description()

    def list_metronome_setups(self):
        metronome_setups = self.dbh.get_metronome_setups()
        for metronome_setup in metronome_setups:
            phrase = self.dbh.get_phrase_by_id(metronome_setup.phrase_id)
            print metronome_setup.id, metronome_setup.speed, metronome_setup.meter, metronome_setup.duration, phrase.get_filename(path=False), phrase.get_short_description()

def main():
    parser = OptionParser()

    parser.add_option('-d', '--database', action="store",
                      type="string", dest="database",
                      help="sqlite database file to use. "
                      "If not given, the filename is looked up in config file (.muspracticerc)."
                      "Otherwise the option overrides the variable")
    
    parser.add_option('-t', '--todo', action="store_true",
                      dest="todo", help="show todo list")
    
    parser.add_option('-l', '--list', action="store_true",
                      dest="list_phrases", help="list all phrases")
    
    parser.add_option('-p', '--play', action="store",
                      type="int", dest="play_phrase",
                      help="phrase id to play")
    
    parser.add_option('-s', '--show', action="store",
                      type="int", dest="show_phrase",
                      help="phrase id to show")
    
    parser.add_option('-r', '--reschedule', action="store",
                      type="int", dest="reschedule_phrase",
                      help="phrase id to (re)schedule")
    
    parser.add_option('-e', '--edit', action="store",
                      type="int", dest="edit_phrase",
                      help="phrase id to edit")
    
    parser.add_option('-c', '--create', action="store_true",
                      dest="create_phrase", help="create phrase")
    
    parser.add_option('-D', '--delete', action="store",
                      type="int", dest="delete_phrase", help="delete phrase")
    
    parser.add_option('-x', '--deactivate', action="store",
                      type="int", dest="deactivate_phrase",
                      help="phrase id to deactivate/suspend (exclude from todo/schedules)")
    
    parser.add_option('-X', '--list-deactivated',
                      action="store_true", dest="list_deactivated",
                      help="list phrases deactivated from scheduling")
    
    parser.add_option('-m', '--metronome', action="store",
                      type="int", dest="metronome",
                      help="play metronome associated with the given phrase id")
    
    parser.add_option('-R', '--list-repetitions', action="store_true",
                      dest="list_repetitions", help="list repetitions")
    
    parser.add_option('-M', '--list-metronome-setups', action="store_true",
                      dest="list_metronome_setups", help="list metronome setups")
    
    (options, args) = parser.parse_args()
      
    ti = TextInterface()
    
    if not options.database:
        options.database = ti.config.DATABASE_FILE
                
    if not os.path.exists(options.database):
        sys.stderr.write('Could not find database file: %s. Initialize new: ./muspractice -d <filename> -i \n' % options.database)
        sys.exit(1)
        
    ti.init_dbhandler(options.database)
        
    if options.play_phrase:
        ti.play_phrase(options.play_phrase)
    elif options.list_phrases:
        ti.list_phrases()
    elif options.show_phrase:
        ti.show_phrase(options.show_phrase)
    elif options.reschedule_phrase:
        ti.reschedule_phrase(options.reschedule_phrase)
    elif options.todo:
        ti.show_todo_list()
    elif options.edit_phrase:
        ti.edit_phrase(options.edit_phrase)
    elif options.create_phrase:
        ti.create_phrase()
    elif options.delete_phrase:
        ti.delete_phrase(options.delete_phrase)
    elif options.deactivate_phrase:
        ti.deactivate_phrase(options.deactivate_phrase)
    elif options.list_deactivated:
        ti.list_deactivated_phrases()
    elif options.metronome:
        ti.play_metronome(options.metronome)
    elif options.list_repetitions:
        ti.list_repetitions()
    elif options.list_metronome_setups:
        ti.list_metronome_setups()
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
